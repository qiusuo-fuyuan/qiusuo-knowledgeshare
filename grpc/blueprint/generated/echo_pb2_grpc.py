# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

##dot means current folder
from . import echo_pb2 as echo__pb2


class EchoStub(object):
    """The echo service definition.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Reply = channel.unary_unary(
                '/echo.Echo/Reply',
                request_serializer=echo__pb2.EchoRequest.SerializeToString,
                response_deserializer=echo__pb2.EchoReply.FromString,
                )


class EchoServicer(object):
    """The echo service definition.
    """

    def Reply(self, request, context):
        """Echo back reply.
        """
        return echo__pb2.EchoReply(message=f'You said: {request.message}')


def add_EchoServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Reply': grpc.unary_unary_rpc_method_handler(
                    servicer.Reply,
                    request_deserializer=echo__pb2.EchoRequest.FromString,
                    response_serializer=echo__pb2.EchoReply.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'echo.Echo', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Echo(object):
    """The echo service definition.
    """

    @staticmethod
    def Reply(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/echo.Echo/Reply',
            echo__pb2.EchoRequest.SerializeToString,
            echo__pb2.EchoReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
